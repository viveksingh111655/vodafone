<?xml version="1.0" encoding="UTF-8"?>
<!--
  This build.xml file contains the tasks common to most if not all of the
  projects.  The basedir is not set here as it is meaningless in this context.

  To include this fragment, include the following tags in your project file:
    <property name="global.dir" value="${basedir}/.."/>
    <import file="${global.dir}/buildtools/common.xml"/>
-->
<project name="common">

  <property environment="env" />
  <property name="buildtools.dir" value="${basedir}/buildtools"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property file="${buildtools.dir}/build.properties" />

  <!-- "${java.home}/../lib" was added only for the 'apt' task
       can be removed if not needed.
   -->
  <path id="classpath">
    <fileset dir="lib" includes="*.jar"/>
    <fileset dir="buildtools/lib" includes="*.jar"/>
    <fileset dir="${env.JAVA_HOME}/lib" includes="*.jar" />
  </path>

  <!-- ======================================= -->
  <!-- Include dynamo ant tasks                -->
  <!-- ======================================= -->

  <taskdef name="dynamoclasspath" classname="atg.applauncher.taskdef.DynamoClasspathTask"
         classpath="${dynamo.home}/lib/launcher.jar"
         onerror="report"/>

  <target name="set-dynamo-classpath">
    <dynamoclasspath classpathproperty="dyn.classpath"
     dynamoroot="${dynamo.root.dir}"
     modules="DCS:PublishingAgent:DCS.PublishingAgent"/>
  	
    <!-- Parse the Dynamo MANIFEST.MF file to obtain the ATG version.    -->
    <!-- This must appear after the buildtools properties have been set  -->
    <!-- but prior to the module build.xml/build.propties being invoked. -->
    <loadfile srcfile="${dynamo.home}/META-INF/MANIFEST.MF"
    	property="atg.version">
      <filterchain>
        <linecontains>
          <contains value="ATG-Version:"/>
        </linecontains>
        <striplinebreaks/>
        <tokenfilter>
          <replacestring from="ATG-Version: " to=""/>
        </tokenfilter>
      </filterchain>
    </loadfile>
  </target>

  <property file="build.properties" />

  <!-- Create a macro for copying sql files. -->
  <macrodef name="copytemplate">
    <attribute name="destdir"/>
    <attribute name="srcdir"/>
    <sequential>
      <copy todir="@{destdir}" failonerror="false" verbose="true">
        <fileset dir="@{srcdir}"/>
        <filterchain>
          <replacetokens>
            <!-- We assume that the first four properties are constant properties -->
            <token key="core_schema" value="${jdbc.core.user}" />
            <token key="cataloga_schema" value="${jdbc.cataloga.user}" />
            <token key="DYNAMO_ROOT" value="${dynamo.root.dir}" />
          </replacetokens>
        </filterchain>
        <mapper type="glob" from="*.sql_master" to="*.sql"/>
      </copy>
    </sequential>
  </macrodef>

  <!-- Other things to watch for in the classpath -->
  <patternset id="resource.files">
    <include name="**/*.properties" />
    <include name="**/*.xml" />
    <include name="**/*.dtd" />
    <include name="**/*.bat" />
    <include name="**/*.sh" />
    <include name="**/*.txt" />
  </patternset>

  <!--
    Files to exclude when cleaning out the temp ear directory. Excluding
    JSPs will make it so they don't get redeployed and recompiled.
  -->
  <patternset id="clean.ear.excludes">
    <exclude name="**/*.jsp"/>
    <exclude name="**/*.jspf"/>
  </patternset>

  <!--
    Create the directories used in the build process. Not intended to be used publicly.
  -->
  <target name="-createdirs">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.dir}/lib" />
    <mkdir dir="${build.dir}/liveconfig" />
    <mkdir dir="${build.config.dir}" />
    <mkdir dir="${build.dir}/configlayers"/>
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${reports.dir}" />
    <mkdir dir="${javadoc.dir}" />
    <mkdir dir="${ear.dir}" />
    <mkdir dir="${build.dir}/install" />
  </target>

  
  <!--
    checks to see which core directories exist
  -->
  <target name="-coredirsexist" description="verifies that certain core directories exist">
    <available file="${src.dir}"             property="srcdirectory.exists" />
    <available file="${test.src.dir}"        property="testsrcdirectory.exists"/>
    <available file="${cim.plugins.src.dir}" property="cimpluginssrcdirectory.exists"/>
    <available file="${cim.lib.dir}"         property="cimlibdirectory.exists"/>
    <available file="${sql.dir}"             property="sqldir.exists" />
    <available file="${build.sql.dir}"       property="buildsqldir.exists" />
    <available file="${liveconfig.dir}"      property="liveconfig.exists" />
    <available file="${configlayers.dir}"    property="configlayers.exists" />
    <available file="${config.dir}"          property="config.exists" />
    <available file="${lib.dir}"             property="libdir.exists" />
    <available file="${install.script.dir}"  property="importScriptdir.exists" />

    <condition property="cimdirectories.exist">
      <and>
      <istrue value="${cimpluginssrcdirectory.exists}" />
      <istrue value="${cimlibdirectory.exists}" />
      </and>
    </condition>
  </target>

  <!--
    Initializes the build.  This target is not public, but should be called
    by all the others.
  -->
  <target name="-init">
    <!-- Create the timestamp -->
    <tstamp />
    <echo message=""/>
    <echo message=""/>
    <echo message="#############################################################################"/>
    <echo message="#############################################################################"/>
    <echo message="${module.parent}.${module.name}: start date = ${DSTAMP}  start time = ${TSTAMP}" />
    <echo message="JAVA_HOME       = ${env.JAVA_HOME}"/>
    <echo message="dynamo.home     = ${dynamo.home}" />
    <echo message="dynamo.root.dir = ${dynamo.root.dir}" />
    <echo message="basedir      = ${basedir}" />
    <echo message="#############################################################################"/>
    <echo message="#############################################################################"/>
    <echo message=""/>
    <echo message=""/>
  </target>

  <!--
  Deletes the build and install directories.
  -->
    <target name="clean"
          depends="-init"
          description="Deletes the contents of the install and build directories.">
    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${install.dir}" excludes="${clean.task.excludes}" />
      <fileset dir="${build.dir}">
        <patternset refid="clean.ear.excludes" />
      </fileset>
	  <fileset dir="${build.versioned.dir}"/>
      <fileset dir="${gen-src.dir}"/>
    </delete>
  </target>

  <!-- Compiles the codebase -->
  <target name="compile"
          depends="-init,set-dynamo-classpath,-createdirs,-coredirsexist"
          if="srcdirectory.exists"
          description="Compiles the source code to the build directory.">
    <mkdir dir="${classes.dir}" />

    <!-- print the classpath information so we know what we're using -->
    <echo message="DYNAMO CLASSPATH = ${dyn.classpath}"/>
    <property name="prop.classpath" refid="classpath" />
    <echo message="CLASSPATH = ${prop.classpath}"/>
    
    <javac srcdir="${src.dir}"
           destdir="${classes.dir}"
           debug="true"
           deprecation="false"
           optimize="false"
           source="1.5"
           target="1.5"
           includeantruntime="false"
           verbose="${javac.verbose.bool}">

      <classpath refid="classpath"/>
      <classpath path="${dyn.classpath}"/>

      <include name="**/*.java" />
      <exclude name="**/${storeconfig.dir}/**"/>
    </javac>
    <!-- copy java resource files to build directory -->
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}/">
        <patternset refid="resource.files" />
      </fileset>
    </copy>
    <!--copy java java source files -->
    <copy todir="${build.dir}/src">
      <fileset dir="${src.dir}"/>
    </copy>
  </target>

  <target name="-copymanifest" depends="-init,-jarconfigs">
    <!-- Set filter token to look for 
         install unit
         module parent name
         and module name
         settings in manifests and configuration files -->
    <filter token="install_unit"               value="${install.unit}"/>
    <filter token="module_root_parent"         value="${module.root.parent}"/>
    <filter token="module_name"                value="${module.name}"/>
    <filter token="default_context_root"       value="${default.context.root}"/>
    <filter token="default_web_app_name"       value="${default.web.app.name}"/>
    <filter token="default_merch_context_root" value="${default.merch.context.root}"/>
    <filter token="default_merch_web_app_name" value="${default.merch.web.app.name}"/>
    <filter token="docroot_context_root"       value="${docroot.context.root}"/>
    <filter token="docroot_web_app_name"       value="${docroot.web.app.name}"/>

    <!-- Copy the manifest -->
    <copy todir="${build.dir}/META-INF" filtering="true">
      <fileset dir="${inf.dir}" />
    </copy>
  </target>
    
  <!-- Granular task to just copy and jar the configs -->
  <target name="-jarconfigs" depends="-init" if="config.exists">
    <!-- Set filter token to look for 
         install unit
         module parent name
         and module name
         settings in manifests and configuration files -->
    <filter token="install_unit"               value="${install.unit}"/>
    <filter token="module_root_parent"         value="${module.root.parent}"/>
    <filter token="module_name"                value="${module.name}"/>
    <filter token="default_context_root"       value="${default.context.root}"/>
    <filter token="default_web_app_name"       value="${default.web.app.name}"/>
    <filter token="default_merch_context_root" value="${default.merch.context.root}"/>
    <filter token="default_merch_web_app_name" value="${default.merch.web.app.name}"/>
    <filter token="docroot_context_root"       value="${docroot.context.root}"/>
    <filter token="docroot_web_app_name"       value="${docroot.web.app.name}"/>

    <!-- Make a temporary config directory to support filter substitution -->
    <mkdir dir="${build.tempconfig.dir}" />
    <copy todir="${build.tempconfig.dir}" filtering="true">
      <fileset dir="${config.dir}" />
    </copy>

    <!-- Jar up the configuration files -->
    <jar jarfile="${build.config.dir}/config.jar" basedir="${build.tempconfig.dir}/" includes="**" />
        
  </target>
    
  <target name="-jar"
          depends="-init,-createdirs,-jarclasses,-jarliveconfig,-copymanifest,-copyscripts,-jarconfiglayers"
          description="creates build directories, jars classes and configuration">
  </target>

  <!--
    Jars the classes and config files, and copies the associated lib files.
  -->
  <target name="-jarclasses"
          depends="-init,-createdirs,-coredirsexist"
          if="srcdirectory.exists"
          description="jars classes and source to build directory.">
    <jar jarfile="${build.dir}/lib/classes.jar"
         basedir="${classes.dir}/"
         includes="**"
         excludes="**/${storeconfig.dir}/**"/>
  </target>

  <target name="-jarliveconfig"
          depends="-init,-createdirs,-coredirsexist"
          if="liveconfig.exists"
          description="copies liveconfig to build directory.">
    <copy todir="${build.dir}/liveconfig">
      <fileset dir="${liveconfig.dir}" />
    </copy>
  </target>

  <target name="-jarconfiglayers"
          depends="-init,-createdirs,-coredirsexist"
          if="configlayers.exists"
          description="copies configlayers to build directory.">
    <copy todir="${build.dir}/configlayers">
      <fileset dir="${configlayers.dir}" />
    </copy>
  </target>

  <!--  -->
  <target name="-copylibs"
          depends="-coredirsexist"
          if="libdir.exists"
          description="copies libs to lib directory if they exist">
    <copy todir="${build.dir}/lib">
      <fileset dir="${lib.dir}" />
    </copy>
  </target>

  <!--  -->
  <target name="-copyscripts"
          depends="-coredirsexist"
          if="importScriptdir.exists"
          description="copies scripts  to install  directory if they exist">
    <copy todir="${build.dir}/install">
      <fileset dir="${install.script.dir}" >
         <patternset refid="resource.files" />
      </fileset>
    
    </copy>
  </target>
  
  <!--
    Installs the codebase to the install directory.  This will not build anything,
    but will create enough of a base application to run off.
  -->
  <target name="install"
          depends="-init, -createdirs, -installunit, -installcore, -installsql,-installddl, -installsrc"
          description="Installs the codebase to the install directory.">
  </target>

  <target name="-install-web-app" description="Installs all module's web applications into installation directory.">
    <!-- Define collection of filters to be applied to web application config files. -->
    <filter token="default_context_root" value="${default.context.root}"/>
    <filter token="default_web_app_name" value="${default.web.app.name}"/>
    <filter token="default_merch_context_root" value="${default.merch.context.root}"/>
    <filter token="default_merch_web_app_name" value="${default.merch.web.app.name}"/>
    <filter token="docroot_context_root" value="${docroot.context.root}"/>
    <filter token="docroot_web_app_name" value="${docroot.web.app.name}"/>

    <!-- Copy config files only and apply filtering to them. -->
    <copy todir="${install.j2ee.dir}/${module.name}" filtering="true" verbose="${copy.verbose.bool}">
      <fileset dir="${j2ee.dir}">
        <patternset>
          <include name="META-INF/**/*.*"/>
          <include name="**/META-INF/*.*"/>
          <include name="**/META-INF/**/*.*"/>
          <include name="${default.web.app.name}/WEB-INF/*.xml*"/>
          <include name="${default.merch.web.app.name}/WEB-INF/*.xml*"/>
        </patternset>
      </fileset>
    </copy>

    <!-- Copy all other web application files (images, JARs, etc.) but do not apply filtering to them. -->
    <copy todir="${install.j2ee.dir}/${module.name}" verbose="${copy.verbose.bool}">
      <fileset dir="${j2ee.dir}">
        <patternset>
          <exclude name="META-INF/*.*"/>
          <exclude name="**/META-INF/*.*"/>
          <exclude name="**/META-INF/**/*.*"/>
          <exclude name="${default.web.app.name}/WEB-INF/*.xml*"/>
          <exclude name="${default.merch.web.app.name}/WEB-INF/*.xml*"/>
        </patternset>
      </fileset>
    </copy>

    <!-- Copy all necessary taglibs into each target WEB-INF directory. -->
    <foreach param="target.webinf.dir" target="-copy-taglibs">
      <path>
        <dirset dir="${install.j2ee.dir}/${module.name}">
          <include name="**/WEB-INF"/>
        </dirset>
      </path>
    </foreach>
  </target>

  <!--
    Copies the tag libs from ATG sources.  Make sure to update this and use
    these whenever possible to avoid having to put jars through the remediation/
    legal process for approval. 
   -->
  <target name="-copy-taglibs">
    <property name="das.taglib.lib.dir"  value="${dynamo.root.dir}/DAS/taglib"/>
    <copy todir="${target.webinf.dir}/lib" verbose="${copy.verbose.bool}">
      <fileset dir="${das.taglib.lib.dir}/jstl/1.1/lib"/>
      <fileset dir="${das.taglib.lib.dir}/dspjspTaglib/1.0/lib"/>
    </copy>
  </target>

  <target name="-installcore" depends="-copymanifest" description="Installs the core config and classes">
    <mkdir dir="${install.dir}/../META-INF" />
    <manifest mode="update" file="${install.dir}/../META-INF/MANIFEST.MF" />
    <delete dir="${install.dir}/META-INF" />
    <mkdir dir="${install.dir}/META-INF" />
    <move file="${build.dir}/META-INF/MANIFEST.MF"
          todir="${install.dir}/META-INF"/>
    <delete dir="${install.dir}/lib" />
    <mkdir dir="${install.dir}/lib" />
    <!-- Do a copy so the classes stick around -->
    <copy todir="${install.dir}/lib">
      <fileset dir="${build.dir}/lib" />
    </copy>
    <delete dir="${install.dir}/config" />
    <mkdir dir="${install.dir}/config" />
    <available file="${build.config.dir}/config.jar" property="config.exists" />
    <if>
      <equals arg1="${config.exists}" arg2="true"/>
      <then>
         <move file="${build.config.dir}/config.jar"
               todir="${install.dir}/config"/>
      </then>
    </if>

    <!-- Copy mapping files -->
    <copy todir="${install.dir}/mappings">
      <fileset dir="${mappings.dir}/" />
    </copy>
  </target>

  <target name="-installsrc" if="srcdirectory.exists">
    <!-- Copy Java sources -->
    <delete dir="${install.dir}/src" />
    <mkdir dir="${install.dir}/src" />
    <copy todir="${install.dir}/src">
      <fileset dir="${build.dir}/src" />
    </copy>
  </target>

  <target name="-installunit"
          description="Sets the project installation directory">
      
    <mkdir dir="${dynamo.root.dir}/${install.unit}/META-INF" />
    <manifest mode="update" file="${dynamo.root.dir}/${install.unit}/META-INF/MANIFEST.MF">
      <attribute name="ATG-Install-Unit"     value="${module.root.parent}"/> 
      <attribute name="ATG-Install-Version"  value="${install.unit}@10.0.2"/>
    
      <!-- Example of how to write a requirement against an install unit      -->
      <!--                                                                    -->
      <!-- <attribute name="ATG-Install-Requires" value="DCS-ABTest@2004.3"/> -->
    </manifest>  
      
  </target>
  
  <target name="-installsql"
          description="Copy the sql to the deploy directory">
    <antcall target="-installnonddlgen"/>
    <antcall target="-installddlgen"/>
  </target>

  <target name="-installnonddlgen"
          description="Copy the hand-coded sql to the deploy directory"
          depends="-coredirsexist"
          if="sqldir.exists">
    <delete dir="${install.dir}/sql" />
    <mkdir dir="${install.dir}/sql" />

    <!--
      Copy over the SQL files.
    -->
    <copy todir="${install.dir}/sql" verbose="true">
      <fileset dir="${sql.dir}" />
      <mapper type="glob" from="*.sql" to="*.sql"/>
    </copy>

    <!--
      Convert and copy the sql_master files to sql by doing some string substitution.
    -->
    <!-- The destdir goes into the scripts as the filter, so this isn't as stupid as it looks. -->
    <copytemplate srcdir="${sql.dir}/${database.type}/install" destdir="${install.dir}/sql/${database.type}/install"/>
    <copytemplate srcdir="${sql.dir}/${database.type}/uninstall" destdir="${install.dir}/sql/${database.type}/uninstall"/>

  </target>

  <target name="-installddlgen"
          description="Copy the generated sql to the deploy directory"
          depends="-coredirsexist"
          if="buildsqldir.exists">
    <copy todir="${install.dir}/sql" verbose="true">
      <fileset dir="${build.sql.dir}" />
    </copy>
  </target>

  <target name="-installddl"
          description="Copy the ddl xml to the deploy directory"
          depends="-coredirsexist"
          if="buildsqldir.exists">

    <copy todir="${install.dir}/sql/dbsetup/ddlgen" verbose="true">
      <fileset dir="${build.dir}/tempddl/ddlgen-source">
        <exclude name="schemas.xml"/>
      </fileset>
      <mapper type="glob" from="*.xml" to="*.xml"/>
    </copy>

  </target>

  <!-- ================================================================= -->
  <!-- Miscellaneous                                                     -->
  <!-- ================================================================= -->

  <!--
    Runs DDLGen to convert dbms-neutral into dbms-specific sql scripts
    Parameters:
        ddlgen.ddlRoot = dir for input schema xml files
        ddlgen.sqlRoot = dir for sql output files (both creates and drops)
        ddlgen.tmpdir = temp directory for use by the conversion
  -->
  <target name="ddlgenconvert">
    <delete dir="${ddlgen.tmpdir}/ddlgen-source"/>

    <mkdir dir="${ddlgen.tmpdir}/ddlgen-source"/>
    <copy todir="${ddlgen.tmpdir}/ddlgen-source">
      <fileset dir="${ddlgen.ddlRoot}" includes="*.xml"/>
    </copy>

    <java classname="atg.road.ddlgen.DDLGenSchemaGenerator" fork="true"
          failonerror="true">
      <classpath path="${buildtools.dir}/lib"/>
      <arg value="${ddlgen.tmpdir}/ddlgen-source"/>
    </java>

    <java classname="atg.road.ddlgen.DDLGen" fork="true" failonerror="true">
      <classpath path="${buildtools.dir}/lib"/>
      <classpath path="${buildtools.dir}/lib/devtools-xmlparserv2.jar"/>
      <classpath path="${buildtools.dir}/lib/devtools-tools.jar"/>
      <classpath path="${buildtools.dir}/lib/das-protocol.jar"/>
      <jvmarg value="-Djava.naming.factory.url.pkgs=atg.jndi.url"/>
      <jvmarg value="-Djava.protocol.handler.pkgs=atg.net.www.protocol"/>
      <arg value="${ddlgen.tmpdir}/ddlgen-source"/>
      <arg value="${ddlgen.sqlRoot}"/>
      <arg value="${buildtools.dir}/ddlgen-config"/>
      <arg value="${ddlgen.tmpdir}/ddlgen-source/schemas.xml"/>
    </java>

  </target>

  <!--
    Converts DDLGen input for a normal schema into DDLGen input for
    the matching versioned schema.
    Parameters:
        ddlgen.version.gsa - Full path of associated repository definition file
        ddlgen.version.ddl - Full path of ddlgen file to be transformed
        ddlgen.version.out - Full path of ddlgen file to be generated
  -->
  <target name="ddlgentransform">
    <property name="ddlgen.dtd.location"
              value="${buildtools.dir}/ddlgen-config"/>
    <property name="ddlgen.xslt.file"
              value="${buildtools.dir}/ddlgen-config/new-ddl-tool-transform.xslt"/>

    <dirname property="dst.ddl.dir" file="${ddlgen.version.out}"/>
    <mkdir dir="${dst.ddl.dir}"/>
    <java classname="atg.apache.xalan.xslt.Process"
          fork="true" failonerror="true">
      <classpath>
        <pathelement path="${buildtools.dir}/lib/publishing-entityresolver.jar"/>
        <pathelement path="${buildtools.dir}/lib/das-atg-services.jar"/>
        <pathelement path="${buildtools.dir}/lib/das-xalan.jar"/>
        <pathelement path="${buildtools.dir}/lib/das-xercesImpl.jar"/>
        <pathelement path="${buildtools.dir}/lib/ddlgen-extensions.jar"/>
        <pathelement path="${buildtools.dir}/lib/das-protocol.jar"/>
      </classpath>
      <jvmarg value="-Djava.naming.factory.url.pkgs=atg.jndi.url"/>
      <jvmarg value="-Djava.protocol.handler.pkgs=atg.net.www.protocol"/>
      <jvmarg value="-DDDLGenResolver.dtd.location=${ddlgen.dtd.location}"/>
      <arg value="-ENTITYRESOLVER"/> <arg value="DDLGenResolver"/>
      <arg value="-XSL"/>            <arg value="${ddlgen.xslt.file}"/>
      <arg value="-IN"/>             <arg value="${ddlgen.version.ddl}"/>
      <arg value="-PARAM"/>          <arg value="repositoryFile"/> <arg value="${ddlgen.version.gsa}"/>
      <arg value="-OUT"/>            <arg value="${ddlgen.version.out}"/>
    </java>
  </target>

  <target name="import-data-transform">
    <java classname="org.apache.xalan.xslt.Process"
          fork="true" failonerror="true">
      <classpath>
        <pathelement location="${dynamo.home}/../../DAS/buildtree" />
        <pathelement location="${dynamo.home}/../DAS/lib/classes.jar" />
        <pathelement path="${buildtools.dir}/lib/xalan-2.7.0.jar"/>
        <pathelement path="${buildtools.dir}/lib/xercesImpl-2.9.0.jar"/>
      </classpath>
      <arg value="-ENTITYRESOLVER"/> <arg value="atg.xml.XMLFileEntityResolver"/>
      <arg value="-XSL"/>            <arg value="${datatransform.xslt.file}"/>
      <arg value="-IN"/>             <arg value="${datatransform.in.file}"/>
      <arg value="-OUT"/>            <arg value="${datatransform.out.file}"/>
    </java>
  </target>

  <target name="exec-database-file">
    <condition property="param.schema.type" value="core">
      <not>
        <isset property="param.schema.type"/>
      </not>
    </condition>
    <antcall target="exec-database-file.${param.schema.type}"/>
  </target>

  <!-- Uses core database schema -->
  <target name="exec-database-file.core">
    <echo message="**** Running ${sql.ddl} for agent schema"/>
    <echo message="     db=${database.type}"/>
    <echo message="     username=${jdbc.core.user}/password=${jdbc.core.password}"/>
    <echo message="     driver=${jdbc.driver}"/>
    <echo message="     url=${jdbc.url}/${jdbc.core.user}"/>
    <antcall target="internal.exec-sql.${database.type}">
      <param name="param.db.driver" value="${jdbc.driver}"/>
      <param name="param.db.user" value="${jdbc.core.user}"/>
      <param name="param.db.password" value="${jdbc.core.password}"/>
      <param name="param.db.jdbc.url" value="${jdbc.url}/${jdbc.core.user}"/>
    </antcall>
  </target>

  <!-- Uses "switching" catalog database schemas -->
  <target name="exec-database-file.catalog">
    <echo message="**** Running ${sql.ddl} for agent schema"/>
    <echo message="     db=${database.type}"/>
    <echo message="     username=${jdbc.cataloga.user}/password=${jdbc.cataloga.password}"/>
    <echo message="     driver=${jdbc.driver}"/>
    <echo message="     url=${jdbc.url}/${jdbc.cataloga.user}"/>
    <antcall target="internal.exec-sql.${database.type}">
      <param name="param.db.driver" value="${jdbc.driver}"/>
      <param name="param.db.user" value="${jdbc.cataloga.user}"/>
      <param name="param.db.password" value="${jdbc.cataloga.password}"/>
      <param name="param.db.jdbc.url" value="${jdbc.url}/${jdbc.cataloga.user}"/>
    </antcall>
    <echo message="**** Running ${sql.ddl} for agent schema"/>
    <echo message="     db=${database.type}"/>
    <echo message="     username=${jdbc.catalogb.user}/password=${jdbc.catalogb.password}"/>
    <echo message="     driver=${jdbc.driver}"/>
    <echo message="     url=${jdbc.url}/${jdbc.catalogb.user}"/>
    <antcall target="internal.exec-sql.${database.type}">
      <param name="param.db.driver" value="${jdbc.driver}"/>
      <param name="param.db.user" value="${jdbc.catalogb.user}"/>
      <param name="param.db.password" value="${jdbc.catalogb.password}"/>
      <param name="param.db.jdbc.url" value="${jdbc.url}/${jdbc.catalogb.user}"/>
    </antcall>
  </target>

  <!-- Uses publishing database schema -->
  <target name="exec-database-file.pub">
    <echo message="**** Running ${sql.ddl} for agent schema"/>
    <echo message="     db=${database.type}"/>
    <echo message="     username=${jdbc.pub.user}/password=${jdbc.pub.password}"/>
    <echo message="     driver=${jdbc.driver}"/>
    <echo message="     url=${jdbc.url}/${jdbc.pub.user}"/>
    <antcall target="internal.exec-sql.${database.type}">
      <param name="param.db.driver" value="${jdbc.driver}"/>
      <param name="param.db.user" value="${jdbc.pub.user}"/>
      <param name="param.db.password" value="${jdbc.pub.password}"/>
      <param name="param.db.jdbc.url" value="${jdbc.url}/${jdbc.pub.user}"/>
    </antcall>
  </target>

  <target name="internal.exec-sql.db2">
    <sql driver="${param.db.driver}" url="${param.db.jdbc.url}" src="${sql.ddl}"
         userid="${param.db.user}" password="${param.db.password}"
         onerror="${onerror.value}"
         classpath="${classpath}">
      <classpath>
        <pathelement path="${devtools.root}/lib/db2java.zip"/>
        <pathelement path="${devtools.root}/lib/db2jcc.jar"/>
        <pathelement path="${devtools.root}/lib/db2jcc_license_cu.jar"/>
        <pathelement path="${jdbc.classpath}"/>
      </classpath>
    </sql>
  </target>

  <target name="internal.exec-sql.mssql">
    <sql driver="${param.db.driver}" url="${param.db.jdbc.url}" src="${sql.ddl}"
         delimiter="go" delimitertype="row"
         userid="${param.db.user}" password="${param.db.password}"
         onerror="${onerror.value}"
         classpath="${classpath}">
      <classpath path="${jdbc.classpath}"/>
    </sql>
  </target>

  <target name="internal.exec-sql.mysql">
    <sql driver="${param.db.driver}" url="${param.db.jdbc.url}" src="${sql.ddl}"
         userid="${param.db.user}" password="${param.db.password}"
         onerror="${onerror.value}"
         classpath="${classpath}">
      <classpath path="${jdbc.classpath}"/>
    </sql>
  </target>

  <target name="internal.exec-sql.oracle">
    <sql driver="${param.db.driver}" url="${param.db.jdbc.url}" src="${sql.ddl}"
         userid="${param.db.user}" password="${param.db.password}"
         onerror="${onerror.value}"
         classpath="${classpath}">
      <classpath path="${jdbc.classpath}"/>
    </sql>
  </target>

  <target name="internal.exec-sql.solid">
    <echo message="JDBC Classpath = ${jdbc.classpath}"/>
    <sql driver="${param.db.driver}" url="${param.db.jdbc.url}" src="${sql.ddl}"
         userid="${param.db.user}" password="${param.db.password}"
         onerror="${onerror.value}"
         classpath="${classpath}">
      <classpath path="${jdbc.classpath}"/>
    </sql>
  </target>

  <!--
    Creates the javadocs for the project.  This is an expensive operation.
  -->
  <target name="javadoc"
          depends="-init,-createdirs"
          description="Builds the javadoc.">
    <javadoc destdir="${javadoc.dir}"
             author="true"
             version="true"
             use="true">
      <packageset dir="${src.dir}" defaultexcludes="yes">
        <include name="**" />
      </packageset>
      <classpath path="${classpath}" />
      <classpath path="${lib.classpath}" />
      <classpath refid="dynamo.classpath" />
      <link offline="true"
            href="http://java.sun.com/j2se/1.4.2/docs/api/"
            packagelistLoc="${jdk.docs.dir}"/>
      <link offline="true"
            href="http://www.atg.com/repositories/ContentCatalogRepository_en/manuals/ATG7.1/apidoc/"
            packagelistLoc="${dynamo.docs.dir}"/>
    </javadoc>
  </target>
  
  <!-- ======================================= -->
  <!-- Misc task defs                          -->
  <!-- ======================================= -->
  <!-- Define the hot swap task -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"
           classpath="${buildtools.dir}/lib/ant-contrib.jar"/>

</project>
<!-- @version $Id: //product/Siebel/version/0.6.0.0.0/buildtools/common.xml#1 $$Change: 842106 $-->
